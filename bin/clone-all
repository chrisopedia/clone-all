#!/usr/bin/env bash

# variables
feed="repos"
path="${HOME}/Downloads"
usage="$(basename "$0"): usage: $(basename "$0") [-h|--help] [-v|--version] [-f|--feed <value>] <github_username> [<path>]"

# Check if git is installed, if not bail
if [ ! $(type -P 'git') ]; then
	printf "$(tput setaf 1)⊘ Error:$(tput sgr0) %s. Aborting!\n" "Git is required to use $(basename $0)"
	exit 1
fi

# Check if jq is installed, if not bail
if [ ! $(type -P 'jq') ]; then
	printf "$(tput setaf 1)⊘ Error:$(tput sgr0) %s. Aborting!\n" "This script requires jq to parse JSON.\n" 
	printf "\n"
	printf "$(tput setaf 1)Download it at http://stedolan.github.io/jq/. Aborting!$(tput sgr0)"
	exit 1
fi

# Help text
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
cat <<EOT

Options:
	-h, --help              Print this help text
	-f, --feed              <value> can be either gists or repos, default is repos
	-v, --version           Print out the version

Documentation can be found at https://github.com/chriopedia/clone-all/
EOT
	exit 0
fi

# Version of software
if [ "$1" == "-v" ] || [ "$1" == "--version" ]; then
	printf "Version $(git describe --tags)\n"
	exit 0
fi

# Test for known flags
while :
do
	case "$1" in
		-f | --feed)
			if [ ! -z "$2" ] && [ "$2" == "gists" ]; then
				feed="$2"
			fi
			shift 2
			;;
		--test)
			# test suite using roundup
			roundup=$(type -P 'roundup')
			[ ! -z $roundup ] || {
				printf "$(tput setaf 1)⊘ Error:$(tput sgr0) %s\n" "roundup library is missing!"
				printf "Check out https://github.com/bmizerany/roundup for instructions on installing roundup."
				exit 1;
			}
			$roundup ./tests/*.sh
			exit 0
			;;
		--) # End of all options
			printf "%s\n" "-bash: $(basename "$0"): $1: invalid option"
			printf "%s" "$usage"
			exit 1
			;;
		-*)
			printf "%s\n" "-bash: $(basename "$0"): $1: invalid option"
			printf "%s" "$usage"
			exit 1
			;;
		*)  # No more options
			break
			;;
	esac
done

# check if directory is not blank and exists
if [ ! -z "$2" ] && [ -d "$2" ]; then
	# http://www.linuxforums.org/forum/programming-scripting/solved-delete-trailing-slashes-using-bash-board-means-print-172714.html
	# This matches from the start of the source string, any 
	# string ending with a non-slash.
	pattern='^.*[^/]'
	# Apply regex
	[[ ${2} =~ $pattern ]]
	# Print the portion of the source string which matched the regex.
	path=${BASH_REMATCH[0]}
fi

# set some variables
user="$1"
api_url="https://api.github.com/users/${user}/${feed}"
current_page=1
per_page=100

printf "%s" "Checking status of user '${user}'"
# http://stackoverflow.com/questions/238073/how-to-add-a-progress-bar-to-a-shell-script
# start progress bar
while :;do echo -n .;sleep 1;done &

# check response header from github user passed in
# http://stackoverflow.com/a/10724976/1536779
response=$(curl --write-out %{http_code} --silent --output /dev/null "${api_url}")

# if reponse is greater than or equal to 400 somethings wrong
if [[ "${response}" -ge 400 ]]; then
	printf "%s\n" "-bash: $(basename "$0"): $1: user doesn't exist"
	#debug statement
	printf "Github HTTP Response code: ${response}\n"
	exit 1
fi

# grab the total number of pages there are
# https://gist.github.com/michfield/4525251
total_pages=$(curl -sI "${api_url}?page=1&per_page=${per_page}" | sed -nE "s/^Link:.*page=([0-9]+)&per_page=${per_page}>; rel=\"last\".*/\1/p")
if [ -z "${total_pages}" ]; then
	total_pages=1
fi

# kill the progress bar
kill $!; trap 'kill $!' SIGTERM
printf "\n"

# grab a list of repos or gists
# @params $1: page number
# example: get_repos_list 1
get_repos_list() {
	# get a json list of all repos and story as array
	if [ "${feed}" != "gists" ]; then
		repos=$(curl -fsSL "${api_url}?page=${1}&per_page=${per_page}" | jq '.[] | .name')
	else
		repos=$(curl -fsSL "${api_url}?page=${1}&per_page=${per_page}" | jq '.[] | .id')
	fi
	echo "$repos"
}

# loop through list of repos at the current page
clone_shit() {
	# get the list of repos for user
	repos_list=($(get_repos_list "${current_page}"))

	# loop through all repos in array
	for index in ${!repos_list[*]}
	do
		# variable assignment
		repo="${repos_list[$index]}"
		# Strip quotes from string
		repo="${repo:1:${#repo}-2}"

		if [ "${feed}" != "gists" ]; then
			printf "Cloning https://github.com/${user}/${repo} to ${path}/repos/${repo}\n"
			git clone "https://github.com/${user}/${repo}" "${path}/repos/${repo}"
		else
			printf "Cloning https://gist.github.com/${repo}.git to ${path}/gists/${repo}\n"
			git clone "https://gist.github.com/${repo}.git" "${path}/gists/${repo}"
		fi
	done
}

printf "\n"

clone_shit
if [ ${total_pages} -gt 1 ] && [ ${current_page} -lt ${total_pages} ]; then
	current_page=$((current_page + 1))
	clone_shit
fi
